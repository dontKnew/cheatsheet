## How Session Works in Codeingiter 4
- CI generate session id , and store in cookies 
- everytime browser visit, ci4 get session id from cookies 
- then return the values...
- all data store in writable/session
- session will work only if session id == file base & cookie session id should same..


Error there is not data to update : check model protected coloumn is true 

=> Installation via command Line
    1. composer should be installed in your computer 
    2. composer create-project codeigniter4/appstarter : given error by this command
    3. composer update  
        => Error : 
                Problem 1
                - phpunit/phpunit[9.1.0, ..., 9.2.6] require php ^7.3 -> your php version (8.1.2) does not satisfy that requirement.
                - phpunit/phpunit[9.3.0, ..., 9.5.20] require ext-dom * -> it is missing from your system. Install or enable PHP's dom extension.
                - Root composer.json requires phpunit/phpunit ^9.1 -> satisfiable by phpunit/phpunit[9.1.0, ..., 9.5.20].  
        try command :  composer update --ignore-platform-reqs

	composer create-project codeigniter4/appstarter --ignore-platform-reqs

=> For learn before this  codeigniter framework,  You must be knowledge of MVC, if you dont knew, checkout my cheatsheet of mvc notes
=> Intro
    1. codeigniter is light weight
    2. codeigniter is fast 
    3. codeigniter uses m-v-c
    4. codeigniter does not require a tempalte engine
=> Features
    Extremely Light Weight
    Full Featured database classes with support for several platforms
    etc.

=> User View System (Application flow chart to display a data)
    Step 1. index.php
    Step 2. Routing
    Step 3. Security (filter data)
    Step 4. Controller
                Step 4.1 Models, libraries, helpers, plugins, scripts
    Step 5. controll return the data to "View"
    Step 6. caching 

=> Controller
1. A simply class file that is associated with url : http://localhost/ci4/public/ClassName/methodName/parameter/parameter/parameter
2. app/Controller/home.php
    <?php
        namespace App\Controllers;

        class Home extends BaseController
        {
            public function index($string, $id)

            {
                echo "My Name is " . $string;
                echo "<br> <br> MY Id is $id";

            }

            public function comment(){
                echo " i am command";
            }
        }

=>first method run in browser: http://localhost/yourpath/ci4/public/home/index/sajid/123
second method : http://localhost/yourpath/ci4/public/home/ or http://localhost/yourpath/ci4/public/ 

    2.1 Your ControllerName must be start first letter uppercase and remain lowercase
    2.2 Your controller file class name must be controller file name with rules of  2.1  
    
3. Define Default Controller, path : app/config/routes.php 
    => this is controller will be load if URI is presented 
    $routes->setDefaultController('ControllerClass');
    $routes->get('/', 'ControllerName::methodName'); // you will be run more about this in routing notes
4. _remap method($parameter) : this is can be override all controllers method and it is take only one parameter
    Example : 
        public function index(){
        echo " I am default controller that is defined in config/routes.php file";
        }

        public function user(){
            echo "I am user method";
        }

        public function _remap($method){
            if($method=='index'){
                return "index method is called";
                return $this->index();
            }else {
                return "another method is called";
            }
            
        }

5. you can define private method that is method not called browse like above said method public method
    proctected function methodName(){ code here ....}

6. You can define your classes in your sub folder directory of controller.

    Example : path : app/controllers/admin/admin/admin.php
    <?php
        namespace App\Controllers\Admin; // give current path directory 

        use App\Controllers\BaseController;

        class Admin extends BaseController
        {
            public function index(){
                return " I am file in  sub director of controller";
            }
        }
    => BrowserRun : http://localhost/PHP/Development/ci4/public/admin/admin or http://localhost/PHP/Development/ci4/public/admin/admin/index



=> Routing :  app/Config/Routes.php  
    =>: there is a one-to-one relationship between a URL string and its corresponding controller class/method. 

    => Following placeholder(like parameters) used as routes url
    (:any)	will match all characters from that point to the end of the URI. 
    (:segment)	will match any character except for a forward slash (/)
    (:num)	will match any integer number.
    (:alpha)	will match any string of alphabetic characters
    (:alphanum)	will match any string of alphabetic characters or integers, or any combination of the two.
    (:hash)	is the same as (:segment), but can be used to easily see which routes use hashed ids. 

    ||The segments in a URI normally follow this pattern: example.com/class/method/id/

    1. Custom Placeholder
        $routes->addPlaceholder('uuid', '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}');
        $routes->add('users/(:uuid)', 'Users::show/$1');

    2. Regular Expression : You can write any regular epxression after routes name
        $routes->get('products/([a-z]+)/(\d+)', 'Products::show/$1/id_$2');

    3. Closures : Closures routes are those routes in which we dont bind any controller and its method for url function
        Ex 1. : $routes->get('home', function () {
            echo "<h1> Welcome to Online Toutrial </h1>";
            // return view('viewFileName');
        });
        Ex 2. : $routes->get('service/(:num)', function ($id) {
            return "This is studennt $id";
        });

    4. Mapping multiple routes : instead of calling add()/get() etc., we will used map() method
        Ex : 
        $multipleRoutes = [
            'product/(:num)'      => 'Catalog::productLookupById',
            'product/(:alphanum)' => 'Catalog::productLookupByName',
        ];
        $routes->map($multipleRoutes);

    5. Named Route : you can give an named to route and access from route_to()method
        Ex : 
        // The route is defined as:
        $routes->add('users/(:num)/gallery(:any)', 'Galleries::showUserGallery/$1/$2', ['as' => 'user_gallery']);
        // Generate the relative URL to link to user ID 15, gallery 12
        // Generates: /users/15/gallery/12
        <a href="<?= route_to('user_gallery', 15, 12) ?>">View Gallery</a>
        => This has the added benefit of making the views more readable, too.
        
    5. Redirecting Routes : 
        Ex : 
        $routes->group('admin', function ($routes) {
            $routes->add('users', 'Admin\Users::index');
            $routes->add('blog', 'Admin\Blog::index');
        });
        
    => If a redirect route is matched during a page load, the user will be immediately redirected to the new page before a controller can be loaded.
    6. Group Routing :  
        $routes->group('admin', function ($routes) {
            $routes->add('users', 'Admin\Users::index');
            $routes->add('blog', 'Admin\Blog::index');
        });
        6.1 nested group with Closures: 
            $routes->group('admin', function ($routes) {
                $routes->group('users', function ($routes) {
                    $routes->add('list', 'Admin\Users::list');
                });
            });

    7. Using HTTP verbs in routes
      => I hope you have already of http verbs 
        $routes->add('products', 'Product::feature'); // its add() method respond all type of http verbs (support ll https verbs), while get will only respond "GET" request, Developer never recommed to use add() method personally.
        $routes->get('products', 'Product::feature');
        $routes->post('products', 'Product::feature');
        $routes->put('products/(:num)', 'Product::feature');
        $routes->delete('products/(:num)', 'Product::feature');

        7.1  You can supply multiple verbs that a route should match by passing them in as an array to the match method:
            Ex : $routes->match(['get', 'put'], 'products', 'Product::feature');
      8. Some Setting of Routes :  
        $routes->setDefaultNamespace('App\Controllers'); 
        $routes->setDefaultController('ControllerFileName'); 
        $routes->setDefaultMethod('ControllerMethodName'); // controller method name will be inside of setDefaultController said
        $routes->setTranslateURIDashes(false);
        $routes->set404Override();
        $routes->setAutoRoute(true); // true : called with controller file name with method name else fasle : it will be called only routes defined routes name otherwise given an error.

=> Controller Filter 
    || Controller filter allow to perform any action like an function etc. before or after any controller execution
    1. Create Filter, path : App\Filters\FilterName.php
    <?php
        namespace App\Filters;

        use CodeIgniter\HTTP\RequestInterface;
        use CodeIgniter\HTTP\ResponseInterface;
        use CodeIgniter\Filters\FilterInterface;

        class DateFilter implements FilterInterface
        {
            public function before(RequestInterface $request, $arguments = null)
            {
                echo "Accesed at ". date('d-M-y'). '</br> </br>';
            
            }

            public function after(RequestInterface $request, ResponseInterface $response, $arguments = null)
            {
                echo "called after controller execution";
            }
        }

    2. defined filter in path : App\Config\Filters
        2.1y First alias filter name in $aliases method  : 'newFilterName' =>  \App\Filters\FilterFileName::class
        2.2 set alias filter name in $global Method : 'newFilterName'
            i. if you set in before array, its will be call before every controller execution 
            ii. vic versa para i for after array.
        2.3 If you dont want to execute filter before/after to  execution of every controller
            $global method inside of array before/after
            'DateFilter'=>['except'=>['routeName', 'anotherRoute']];  
        
=> HTTP message/Request, Response

    1. get information 
     $method = $this->request->getMethod() ;
     $method = $this->request->uri->getPath(); // Path Name after of domain url
     $method = base_url($this->request->uri->getPath()); // get full url of currnet execution path;
     $method = $this->request->getHeaders(); 
     $method = $this->request->getHeader('RequestName'); // you checkecout all headers name using  $this->request->getHeaders()
     $method = $this->request->getServer();// return server information
     
        1.1 use CodeIgniter\HTTP\Request // set top
        $method = $this->request->getIPAddress();
            1.1.1 check Valid ip address or not;
            
            if ( ! $this->request->isValidIP($method)) { 
                echo 'Not Valid';
            } else {
                echo 'Valid';
            }


    print_r($method);
        

    2. set information  : 
        2.1 open network tab of browser and checkout content type is set as text/txt, 
            $html = " <h1> Hello World</h1> ";
            $this->response->setBody($html);
            //  $this->response->send(); // output hello world with h1 tag;
            $this->response->setHeader('Content-Type','text/txt');
            $this->response->send(); // output hello world with h1 tag as string ; 
        
            $this->response->setCache('max-age','120');
            $this->response->setStatusCode('404');
            $this->respond->send();

        2.2 For more learn : https://codeigniter.com/user_guide/incoming/message.html and https://codeigniter.com/user_guide/incoming/request.html

=> View 
    * A view is simply a web page, or a page fragment, like a header, footer, sidebar, etc.
    * Views never called directly in codeigniter, its called by alwayas by controller
    * path : App\Views\fileName.php


    Ex : create a file in views folder  fileName.php
        <html>
            <head>
                <title>My Blog</title>
            </head>
            <body>
                <h1>Welcome to my Blog!</h1>
            </body>
        </html>

        Now create in a controller in Home.php
        <?php
            namespace App\Controllers;

            class Home extends \CodeIgniter\Controller
            {
                public function index()
                {
                    echo view('fileName');
                }
            }
        run : example.com/index.php/
        
    
    1. call views from sub directory
        App/Views/Admin/admin.php
        1.1 calling in controller
            echo view('Admin/admin');

    2. send controller data to view file 
        Ex : <html>
                <head>
                    <title><?= esc($title) ?> </title>
                </head>
                <body>
                    <h1>Welcome to my Blog!</h1>
                </body>
            </html>

        Now create in a controller in Home.php
        <?php
            namespace App\Controllers;

            class Home extends \CodeIgniter\Controller
            {
                public function index()
                {
                    $data = [
                        'title' => 'Home Page',
                    ];

                    echo view('fileName', $data);
                }
            
        3. Access contoller data via loop
                    $data = [
                    'todo_list' => ['Clean House', 'Call Mom', 'Run Errands'],
                    'title'     => 'My Real Title',
                    'heading'   => 'My Real Heading',
                    ];
            view file 
            <html>
                <head>
                    <title><?= esc($title) ?></title>
                </head>
                <body>
                    <h1><?= esc($heading) ?></h1>

                    <h3>My Todo List</h3>

                    <ul>
                    <?php foreach ($todo_list as $item): ?>

                        <li><?= esc($item) ?></li>

                    <?php endforeach ?>
                    </ul>
                </body>
            </html>

        4. view cell : call the view file/method of controler using view cell method()
            Ex : We have two views file 1. footer.php 2. home.php
            1. home.php
            <h1> Hello I am home Page </h1>
            2. footer.php
            </h2> hello I am footer page </h>
            And Controller Home.php
                public function index(){
                    echo view ('practice');           
                }
                public function footer(){
                    $data = ['title'=> "I am title", 'heading'=>'i m heading']
                    return view('footer');
                }
            * We can add all footer html/stirng method in view file
            =>home.php
                <h1> Hello I am home Page </h1>
                <?= view_cell('\App\Controllers\Practice::footer', $data); ?>
        
        5. Cache :  Cache the view for some seconds
            5.1 in controlle declared in third parameter of view()
            echo view('file_name', $data, ['cache' => 60]);

            5.2 in html by using  view_cell()
            <?= view_cell('\App\Libraries\Blog::recentPosts', 'limit=5', 300) ?>
        
        6. view Render()
            => this is like view() method
            => The render() function is a convenience function that grabs an instance of the renderer service, sets the data, and renders the view
            3.1 setVar('Name','value','html'); // third parameter (optional) can be html, css, js, url, attr, row
            3.2 setData([array]);
            3.3 render('fileNmae',$Optiondata)
            3.4 renderString('<h1> I love coidng </h1>', $optionData);
        Ex : Controller Method 

                public function index(){

                    // $data = ["title"=>'Home Page', "heading"=>'i m heading'];
                    $r = \Config\Services::renderer();
                    // $r->setData($data);
                    $r->setVar('title', "HomeTitle")->setVar('heading', 'I m heading');
                    $r->setVar('name','Joe','html');

                    return $r->render('practice');     
                }
        7. View Layout
            => its help for making our page layout 
            Example : 
            pracitce.php
                <?= $this->extend('default') ?> // include all file
                <?= $this->section('content') ?> //
                    <h2>Hello World!</h2>
                  <?= $this->endSection() ?>

            deafult.php
                <!DOCTYPE html>
621+0                <html lang="en">
                <head>
                    <meta charset="UTF-8">
                    <meta http-equiv="X-UA-Compatible" content="IE=edge">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Document</title>
                </head>
                <body>

                <h1> HEAIDNG  </h1>
                    <?= $this->renderSection('content') ?>
                    <h1> FOOTER</h1>
                </body>
                </html>

        8. Link file like javascript css bootstrap image etc.
            => by using site_url('path name');
            <linkpt src="<?php  echo site_url('public/assets/flilename.js')?>" >
            <link href="<?php  echo site_url('public/assets/flilename.css')?>" >
        
        9. View parser
            => Controller File load inside of method  : $parser = \Config\Services::parser();
            => Now You can use all method like setVar(), setData(), render(), renderString() like (View Render para 6)
            Example 1. 
            $template = '<head><title>{blog_title}</title></head>';
            $data     = ['blog_title' => 'My ramblings'];
            echo $parser->setData($data)->renderString($template);

            Example 2 :  Loop nested
            view File : 
                <h3>{blog_heading}</h3>
                {blog_entries}
                    <h5>{title}</h5>
                    <p>{body}</p>
                {/blog_entries}
            controler file : 
            $data = [
                    'blog_title'   => 'My Blog Title',
                    'blog_heading' => 'My Blog Heading',
                    'blog_entries' => [
                        ['title' => 'Title 1', 'body' => 'Body 1'],
                        ['title' => 'Title 2', 'body' => 'Body 2'],
                        ['title' => 'Title 3', 'body' => 'Body 3'],
                        ['title' => 'Title 4', 'body' => 'Body 4'],
                        ['title' => 'Title 5', 'body' => 'Body 5'],
                    ],
                ];

            return $parser->setData($data)->render('blog_template');

            1. Comments : write comment in view file its will ignore and remove during parsing 
                         {# This comment is removed during parsing. #} // hidden from browser
                         <!-- HTML --> //  visible in browser
            2. Cascading Data : 
            Example : 
                $template = '{name} lives in {location}{city} on {planet}{/location}.';
                $data = [
                    'name'     => 'George',
                    'location' => ['city' => 'Red City', 'planet' => 'Mars'],
                ];

                echo $parser->setData($data)->renderString($template);
                // Result: George lives in Red City on Mars.

                2.1 if you false Cascading it will be given different Result
                $template = '{location}{name} lives in {city} on {planet}{/location}.';
                $data = [
                    'name'     => 'George',
                    'location' => ['city' => 'Red City', 'planet' => 'Mars'],
                ];

                echo $parser->setData($data)->renderString($template, ['cascadeData'=>false]);
                // Result: {name} lives in Red City on Mars.

                echo $parser->setData($data)->renderString($template, ['cascadeData'=>true]);
            
            3. Preventing Parse : thats mean no variable substitution, looping, etc will used in this case
                {noparse}
                    <h1>Untouched Code {$name}</h1> 
                {/noparse}
                resutl : Untouched coce {name}

           4. Conditional Logic : Parser class support some basic Conditional to handle if, else, else if syntax. 
            Example : view File
            {if $role=='admin'}
                <h1>Welcome, Admin</h1>
                {elseif $role=='moderator'}
                    <h1>Welcome, Moderator</h1>
                {else}
                    <h1>Welcome, User</h1>
            {endif}

            5. Filter
                => We can define filter after pseudo-variable name and seperated by pipe symbol -> | 
                => Example : {blog_heading | upper | highlight_code} // return with all characters are in uppercase with highlight_code
                5.1 There are lots of filter defined by codeigniter 👍
                    i. abs :  Displays the absolute value of a number.	
                    ii. capitalize : Displays the string in sentence case: all lowercase with firstletter capitalized.	
                    iii. date : display date in specfic formate : { pseudo-variable|date(Y-m-d) }
                    iv. date_modify : { pseudo-variable|date_modify(+1 day) }
                    v. default : display the default value, if pseudo variable is empty or undefined 
                    vi. highlight : used <mark> html tag
                    vii.highlight_code : highlight text with html/css
                    viii.limit_chars : return the text with limited letter
                    xi. limit_words : return the words with limited word Ex : {variable | limit_words(10)}
                    x. lower : 
                    xi.  title: Displays a “title case” version of the string, with all lowercase, and each word capitalized.	
            
            6. HTML table class 
            => you can create a table from a multi-dimensional array by adding class : $table = new \CodeIgniter\View\Table();
            //Controller 
            Example 1 : Both example is output same 
                $table->setHeading('Name', 'Color', 'Size');
                $table->addRow('Fred', 'Blue', 'Small');
                $table->addRow('Mary', 'Red', 'Large');
                $table->addRow('John', 'Green', 'Medium');
                echo $table->generate();
                    OR
                $data = [
                    ['Name', 'Color', 'Size'],
                    ['Fred', 'Blue',  'Small'],
                    ['Mary', 'Red',   'Large'],
                    ['John', 'Green', 'Medium'],
                ];
                return  $table->generate($data);

                Example 2 : 
                    $table->setHeading('Name', 'Color', 'Size');
                    $table->addRow('Fred', '<strong>Blue</strong>', 'Small');
                    //$table->function = 'htmlspecialchars'; // if you dont use here,, now you can use html tag inside of $table->addRow() method, else html tag alongwith  print
                    echo $table->generate();

                    6.1 Table Name : $table->setCaption('Colors') 

                    6.2 Table column heading Name : 
                        $table->setHeading('Name', 'Color', 'Size'); 
                                    OR 
                        $table->setHeading(['Name', 'Color', 'Size']);

                    6.3 Set Table row Data : $table->setFooting('Subtotal', '-', '200'); // or  

                    6.4 Table Row : 
                            6.4.1 $cell = ['data' => 'Blue', 'class' => 'highlight', 'colspan' => 2];

                        $table->addRow($cell, 'Red', 'Green');  or $table->addRow([$cell, 'Red', 'Green']);
                        //Output :  <td class='highlight' colspan='2'>Blue</td><td>Red</td><td>Green</td>

                    6.5 makeColumn([$array=[],[$columnLimit=0]]);
                        $list = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve'];
                        $newList = $table->makeColumns($list, 3);
                        $table->generate($newList);
                            //Output : will be three column 
                                one	    two 	three
                                four	five	six
                                seven	eight	nine
                                ten 	eleven	twelve
                    6.7. clear() 👍  : clear the table caption, row and  heading. 

            7. Localization : CodeIgniter provides tools to help you localize your application for different langauges.
                
                7.1 Create language in path :  app/langauges/langaugeFolderName/App.php

                7.2 set Deafult Language path in App/Config/App.php public 
                            => $defaultLocale = 'en'; 
                7.3 Define supported langauges :  public $supportedLocales = ['en', 'es', 'fr-FR'];
                7.4 load page with custom langugae : $routes->get('{'en'}/books', 'App\Books::index'); // here you can thats language which is defined in app/config/app.php configuration para 2
                    3.1 If the value doesn’t match a valid locale as defined in the App configuration file, the default locale will be used in it’s place.
                7.5. $this->request->getLocale() // return the current language 
            
            8. Alternative php syntax : 
                8.1 print a variable :  i. <?php echo $variable; ?> ii. <?= $variable ?>
                8.2 SOm
                    8.2.1 endfor, endforeach, and endwhile
                    <ul>
                    <?php foreach ($todo as $item): ?>

                        <li><?= $item ?></li>

                    <?php endforeach ?>
                    </ul>

                    8.2.2 if, elseif, else 
                        <?php if ($username === 'sally'): ?>
                            <h3>Hi Sally</h3>

                        <?php elseif ($username === 'joe'): ?>
                            <h3>Hi Joe</h3>

                        <?php else: ?>
                            <h3>Hi unknown user</h3>
                        <?php endif ?>
=> Database
    1. Configuration Database have two way 
        1.1 app/Config/Database.php and setting the database connectivity
        1.2 configuration with .env file
            *.env will find in root folder of project
                i. set up the base url = 'https://domainName.com/RootfolderName'
                ii.un-comment the databse username, root, database etc. and fill details.

    2. Quick start : 
    $db = \Config\Database::connect(); or $db = db_connect();
      2.1 Select Data : 

        2.1.1 Get Multiple records with query Standard
                $query   = 	
                $results = $query->getResult();// result with objects formate
                foreach ($results as $row) {
                    echo $row->title;
                    echo $row->name;
                    echo $row->email;
                }
                
                $results = $query->getResult();// result with array formate
                foreach ($results as $row) {
                echo $row['title'];
                echo $row['name'];
                echo $row['email'];
            }
                echo 'Total Results: ' . count($results);

        2.1.2 Single Query :
            $query = $db->query('SELECT name FROM my_table LIMIT 1');
            i. object version
                $row   = $query->getRow();
                echo $row->name;
            ii. array version 
                $row   = $query->getRowArray();
                echo $row['name'];

        2.1.3 By Query Builder : 
        $query = $db->table('table_name')->get();
        foreach ($query->getResult() as $row) {
            echo $row->title;
        }

    2.2 Insert Data
        2.2.1 By Standard Query
        $sql = "INSERT INTO mytable (title, name) VALUES (".$db->escape($title).", ".$db->escape($name).")";
        $db->query($sql);
        echo $db->affectedRows();

        2.2.1 By Query Builder : 
        $data = [
            'title' => $title,
            'name'  => $name,
            'date'  => $date
        ];
        $db->table('mytable')->insert($data);

    2.3 Connect Database in Controller
    $db = db_connect(); or $db = \Config\Database::connect();
        2.1 Connect Single Database  : 
            $db = \Config\Database::connect('group_name', false); // group_name is the name of where you have config/database.php file
        2.2 Multiple Connect Database 
            $db1 = \Config\Database::connect('group_one');
            $db2 = \Config\Database::connect('group_two');
        2.2 switch to another database in same connectivity
            $db->setDatabase($database2_name);
        2.3 close connection
            $db->close();
        2.4 re-connect database
            $db->reconnect();

    2.4 Regular Standard PHP Query : 
        $db = db_connect();
        $db->query('YOUR QUERY HERE');
    Note :  data return in objects formate

    2.5 Simple Query : this is query does not return any set of data etc. it will return only true or false;
        Example : 
        $db  = db_connect();
        if($db->simpleQuery('Enter SQL Query')){
            echo "success";
        }else {
            echo "failed";
        }
    
    2.6 Protecting Identifiers : In many databases, it is advisable to protect table and field names - for example with backticks in MySQL. Query Builder queries are automatically protected, but if you need to manually protect an identifier you can use:
        $db->protectIdentifiers('table_name');

    2.7. Escaping Query 
        2.7.1 $db->escape() it can escape only string data. It also automatically adds single quotes around the data so you don’t have to:
            $sql = "INSERT INTO table (title) VALUES(" . $db->escape($title) . ")";

        2.7.2 $db->escapeString() This function escapes the data passed to it, regardless of type. Most of the time you’ll use the above function rather than this one. Use the function like this:
            $sql = "INSERT INTO table (title) VALUES('" . $db->escapeString($title) . "')";
            
        2.7.3 $db->escapeLikeString() This method should be used when strings are to be used in LIKE conditions so that LIKE wildcards (‘%’, ‘_’) in the string are also properly escaped.
        $search = '20% raise';
        $sql = "SELECT id FROM table WHERE column LIKE '%" .
        $db->escapeLikeString($search) . "%' ESCAPE '!'";
    
    2.8 Query Binding : 
        * Whenever you Binding data,you dont need to escape data 

        2.8.1 $sql = "SELECT * FROM some_table WHERE id = ? AND status = ? AND author = ?";
              $db->query($sql, [3, 'live', 'Rick']);
        2.8.2  $sql = "SELECT * FROM some_table WHERE id IN ? AND status = ? AND author = ?";
                $db->query($sql, [[3, 6], 'live', 'Rick']);

        2.8.3 Named Binding
            $sql = "SELECT * FROM some_table WHERE id = :id: AND status = :status: AND author = :name:";
            $db->query($sql, [
                'id'     => 3, array
                'status' => 'live',
                'name'   => 'Rick',
            ]);
    
    2.9. Handling Errors :
        2.9.1 $db->error() : return an associates array(); with key has code,  message 
            Example : if ( ! $db->simpleQuery('SELECT `example_field` FROM `example_table`')) {
                            $error = $db->error(); // Has keys 'code' and 'message'
                        }
		or 
		try  { }catch(\Exception $e){return $e}
    2.10 prepare(closure) : first parameter is closure which is return objects;
        Ex :
        $pQuery = $db->prepare(function ($db) {
            return $db->table('user')->insert([
                'name'    => 'x',
                'email'   => 'y',
                'country' => 'US'
            ]);
        });
        // Collect the Data
        $name    = 'John Doe';
        $email   = 'j.doe@example.com';
        $country = 'US';
        // Run the Query
        $results = $pQuery->execute($name, $email, $country);

            2.10.1 if u dont want to use query builder and you cn  Query Object,  
            use CodeIgniter\Database\Query;
            $pQuery = $db->prepare(function ($db) {
                $sql = "INSERT INTO user (name, email, country) VALUES (?, ?, ?)";
                return (new Query($db))->setQuery($sql);
            });
                $name    = 'John Doe';
                $email   = 'j.doe@example.com';
                $country = 'US';
                // Run the Query
                $results = $pQuery->execute($name, $email, $country);

            2.10.2 pass data through array 
            use CodeIgniter\Database\Query;
            $pQuery = $db->prepare(function ($db) {
                $sql = "INSERT INTO user (name, email, country) VALUES (?, ?, ?)";
                return (new Query($db))->setQuery($sql);
            }, $options);

            2.10.3 $pQuery->close();
    
    2.11 Other Methods
        2.11.1 hasError() : return true or fasle if error encountered
                if ($query->hasError()) {
                    echo 'Code: ' . $query->getErrorCode();
                    echo 'Error: ' . $query->getErrorMessage();
                }
        2.11.2 getErrorCode() getErrorMessage() // if error occurred, return the error
        2.11.3 $query = $db->getLastQuery(); echo (string) $query; // only for prepare query and return last query 
        2.11.4 $query =  getQuery() // return  last query, $sql = (string) $query;
        2.11.5 $sql = $query->getOriginalQuery(); // return original executed query
        2.11.6 isWriteType() // return true, if query write type like "INSERT, UPDATE, DELETE etc"
        2.11.7 $microtime = $query->getStartTime(); // Gets the time the query was executed in seconds with microseconds:
        2.11.8 $microtime = $query->getDuration(); // Returns a float with the duration of the query in seconds with microseconds:

    2.12 Query Result 👍
    query = $db->query("YOUR QUERY");
        2.12.1 by  Object 
            foreach ($query->getResult() as $row) {
                echo $row->title;
                echo $row->name;
                echo $row->body;
            }
        2.12.2 by Array 
            foreach ($query->getResult('array') as $row) {
                echo $row['title'];
                echo $row['name'];
                echo $row['body'];
            }
            or 
            //by pure array
            foreach ($query->getResultArray() as $row) {
                echo $row['title'];
                echo $row['name'];
                echo $row['body'];
            }

        
        2.12.2 return as array but show in object   
        $query = $db->query("SELECT * FROM users;");
            foreach ($query->getResult('User') as $user) {
                echo $user->name; // access attributes
                echo $user->reverseName(); // or methods defined on the 'User' class
            }
        2.12.3 getRow() : return only first row by objects  
            $row = $query->getRow();
            if (isset($row)) {
                echo $row->title;
                echo $row->name;
                echo $row->body;
            }
            *if you want to another row from multiple row, just pass by numric series
                $row = $query->getRow(5);
        2.12.4 Other  : 
                $row = $query->getFirstRow()
                $row = $query->getLastRow()
                $row = $query->getNextRow()
                $row = $query->getPreviousRow()
                By default they return an object unless you put the word “array” in the parameter:

                $row = $query->getFirstRow(‘array’)
                $row = $query->getLastRow(‘array’)
                $row = $query->getNextRow(‘array’)
                $row = $query->getPreviousRow(‘array’)

        2.12.5 Custom Helper 
            $query = $db->query('SELECT * FROM my_table');
            i. $query->getFieldCount()
            ii. getFieldNames(): return column name
            iii. getNumRows() // 
            iv. dataSeek() : 
                Example : 
                    $query = $db->query('SELECT `field_name` FROM `table_name`');
                    $query->dataSeek(5); // Skip the first 5 rows
                    $row = $query->getUnbufferedRow();  
            v. db->table('my_table')->countAll();
            vi. (string)$db->getLastQuery()  // result must be in string 'formate'
            v. $db->table('my_table')->like('title', 'match')->countAllResults(); count row like column (title) 'match'
            vi. $db->getPlatform(); // result : MySQL, MS SQL, Postgres, etc…
            vii. $db->getVersion(); return database version which are you running

    2.13 Query Builder class
        $db = \Config\Database::connect();
        2.13.1 getCompiledSelect() : return query string/text;
            Ex :  $builder = $db->table('Employee');
                echo $builder->limit(10,20)->getCompiledSelect(false); 
                //result : SELECT * FROM `Employee` LIMIT 20, 10
        2.13.2 get() or get(10,20) : parameter LIMIT 10, 20; result will 10-20 rows under
            Ex : query = $builder->get();
                foreach ($query->getResult() as $row) {
                    echo $row->title;
                }
        2.13.3 select('column name', 'column name1') or select('*');
            $builder->select('title, content, date');
            $query = $builder->get();
        12.13.4 $query = $builder->getWhere(['id' => $id], $limit, $offset);
        12.13.4
            i. selectMax('age'), selectMin('age'), selectAvg('age'), selectSum('age'),selectCount('age'),
            ii. from : $builder = $db->table('users');
                        $builder->select('title, content, date');
                        $builder->from('mytable');
                        $query = $builder->get();
            iii. join : $builder = $db->table('blogs');
                        $builder->select('*');
                        $builder->join('comments', 'comments.id = blogs.id');
                        $query = $builder->get()
        12.13.5 Where in QueryBuilder 
                i.Simple key/value method:
                $builder->where('name', $name);
                // Produces: WHERE name = 'Joe'
                Notice that the equal sign is added for you.

                If you use multiple function calls they will be chained together with AND between them:

                $builder->where('name', $name);
                $builder->where('title', $title);
                $builder->where('status', $status);
                // WHERE name = 'Joe' AND title = 'boss' AND status = 'active'

                ii. Custom key/value method:
                You can include an operator in the first parameter in order to control the comparison:

                $builder->where('name !=', $name);
                $builder->where('id <', $id);
                // Produces: WHERE name != 'Joe' AND id < 45

                iii. Associative array method:
                $array = ['name' => $name, 'title' => $title, 'status' => $status];
                $builder->where($array);
                // Produces: WHERE name = 'Joe' AND title = 'boss' AND status = 'active'
                You can include your own operators using this method as well:

                $array = ['name !=' => $name, 'id <' => $id, 'date >' => $date];
                $builder->where($array);

                iv. Custom string:
                You can write your own clauses manually:

                $where = "name='Joe' AND status='boss' OR status='active'";
                $builder->where($where);


        Learn More Quer Builder from https://codeigniter.com/user_guide/database/query_builder.html
        Note : this is very easy , you can easily understand all topcis, so i am not add thats things in my notes

    2.14 Transactions 
        * for run multi query you can checkout to all query success or not
        * if failure, you can rollback your all query
        * by deafult codeigniter enabled Transactions, you can mannualy disabled it by $this->db->transoff()
        Example 1 : 
            $this->db->transStart();
            $this->db->query('AN SQL QUERY...');
            $this->db->query('ANOTHER QUERY...');
            $this->db->transComplete();
            if ($this->db->transStatus() === false) {
                // generate an error... or use the log_message() function to log your error
            }

            2.14.1 Main.Test Mode -
                $this->db->transStart(true); // Query will be rolled back
                $this->db->query('AN SQL QUERY...');
                $this->db->transComplete();


            2.14.2 Run mannualy : 
                $this->db->transBegin();
                $this->db->query('AN SQL QUERY...');
                $this->db->query('ANOTHER QUERY...');
                $this->db->query('AND YET ANOTHER QUERY...');

                if ($this->db->transStatus() === false) {
                    $this->db->transRollback();
                } else {
                    $this->db->transCommit();
                }

        2.15 Database Metadata : These functions let you fetch table information.
                i. $tables = $db->listTables();
                    foreach ($tables as $table) {
                        echo $table;
                    }
                ii. if ($db->tableExists('table_name')) {// some code...}
                iii. $fields = $db->getFieldNames('table_name');    or
                     $query = $db->query('SELECT * FROM some_table');
                        foreach ($query->getFieldNames() as $field) {
                            echo $field;
                        }
                iv. $db->fieldExists('field_name', 'table_name')
                v. db->getFieldData('table_name') : return an object
                        or 
                        $query  = $db->query("YOUR QUERY");
                        $fields = $query->fieldData();

                vi.$keys = $db->getIndexData('table_name');
                    foreach ($keys as $key) {
                        echo $key->name;
                        echo $key->type;
                        echo $key->fields; // array of field names
                    }

                vii. $keys = $db->getForeignKeyData('table_name');
                    foreach ($keys as $key) {
                        echo $key->constraint_name;
                        echo $key->table_name;
                        echo $key->column_name;
                        echo $key->foreign_table_name;
                        echo $key->foreign_column_name;
                    }
        2.16 Custom Call function : $db->callFunction   
            * You can not  call the php function like mysql_get_client_info(), 
            * You can call by $db->callFunction('get_client_info');
            Syntax : 
                $db->callFunction('some_function', $param1, $param2, etc..);
            Example : 
                $query = $db->query("SOME QUERY");
                $query->resultID;
        2.17 Get XML Result from database   
        Example : 
            $model = new class extends \CodeIgniter\Model {
                protected $table      = 'foo';
                protected $primaryKey = 'id';
            };
            $db = \Closure::bind(function ($model) {
                return $model->db;
            }, null, $model)($model);

            $util = (new \CodeIgniter\Database\Database())->loadUtils($db);
            echo $util->getXMLFromResult($model->get());
        Result : 
            <root>
                <element>
                    <id>1</id>
                    <name>bar</name>
                </element>
            </root>

    3. Modeling Data :  You can use model for specfic database table and records
	=> ERRORS
		1. whenenver you use update() method, it will not update until your change all data otherwise you can update one by one

        * app/Models
        * Model Features : 
                automatic database connection
                basic CRUD methods
                in-model validation
                automatic pagination
                and more

        3.1 Access Model from controllers and anywhere 
            // Create a new class manually
            $userModel = new \App\Models\UserModel();

            // Create a new class with the model function
            $userModel = model('App\Models\UserModel', false);

            // Create a shared instance of the model
            $userModel = model('App\Models\UserModel');

            $db = db_connect('custom');
            $userModel = model('UserModel', true, $db);
        3.2 Connecting Database, path : App/Models/
            <?php
            namespace App\Models;
            use CodeIgniter\Model;
            class UserModel extends Model{ protected $DBGroup = 'group_name';}
        3.3  Configuration of Model  : 
            * spouse, you have to perform a curd opeartion to your model config will be below under : - 
            <?php
                namespace App\Models;
                use CodeIgniter\Model;

            class UserModel extends Model
            {
                protected $table      = 'users';
                protected $primaryKey = 'id';

                protected $useAutoIncrement = true;

                protected $returnType     = 'array'; // results will be in array formate
                protected $useSoftDeletes = false; // true for backup database and keep false if find(), findAll() method does not work

                protected $allowedFields = ['name', 'email'];

                protected $useTimestamps = false;
                protected $createdField  = 'created_at'; // if $useTimestamps true, then just leave it
                protected $updatedField  = 'updated_at';//if $useTimestamps true, then just leave it
                protected $deletedField  = 'deleted_at';

                protected $validationRules    = [];
                protected $validationMessages = [];
                protected $skipValidation     = false; // if true validation will be avoiding by model

                	// Callbacks
                    protected $allowCallbacks       = true;
                    protected $beforeInsert         = [];
                    protected $afterInsert          = [];
                    protected $beforeUpdate         = [];
                    protected $afterUpdate          = [];
                    protected $beforeFind           = [];
                    protected $afterFind            = [];
                    protected $beforeDelete         = [];
                    protected $afterDelete          = [];
            }

        3.4  Serverl Method of Update, insert, delete etc. providing by codiegniter : 
            *After setupt configuration of model, go to controller
            use \App\Models\UserModel;
            $userModel = new UserModel();
            
2            3.4.1 Finding data 
                i. $userModel->find($user_id) ii.  $userModel->find([1,2,3]) iii. findColumn($column_name)
                iv.findAll() v. $users = $userModel->where('active', 1)->findAll() vi. findAll($limit, $offset);
                vii. $userModel->where('deleted', 0)->first(); // return the first();
                viii. withDeleted() : In model configuration $useSoftDeletes is true, then find and findALl() method alwayas getting result null, for this you can use withDelete() for using find and findAll();
                     $userModel->findAll(); // Only gets non-deleted rows (deleted = 0)
                    $userModel->withDeleted()->findAll(); // Gets all rows with deleted rows
                xi. userModel->onlyDeleted()->findAll(); // return only deleted rows;
		x. forceDelete() - delete permanently 

            3.4.2 Saving Data : insert data only associated array (key and value)
                $data = ['tableName1'=>"value", 'tableName2'=>'value2']; $userModel->insert($data);


            3.4.3 update Data : first parameter alwayas $id (primaryKey) and second is associated array
                $data = ['tableName1'=>"value", 'tableName2'=>'value2']; $userModel->update($id, $data);
                
                i. update multiple row records with single call 
                    $data = ['active'=>1]; $userModel->update([1, 2, 3], $data);
                    or $userModel->whereIn('id', [1,2,3])->set(['active' => 1])->update();

            3.4.4 Save() : if you primary key id found, then it will be update data 
                Ex : $primaryId = 2;
                    $data = ['tableName1'=>"value", 'tableName2'=>'value2']; $userModel->save($data); // insert data without primary key
                    $data = ['id'=>$primaryId', tableName1'=>"value", 'tableName2'=>'value2']; $userModel->save($data); // update data whereas primary key  id match
            
            3.4.5 Deleting Data :
            $userModel->delete(12); // delete data whereas the first parameter primary key id , and second parameter is boolean, if true, then it will be delete permanently if softdelete is also true;  
            $userModel->where('id', 12)->delete(); // query builder delete method
            $userModel->delete([1,2,3]); // multiple delete
            $userModel->purgeDeleted(); cleans out the table
        
        3.5 Validation in Model 
                protected $validationRules    = [
                    'username'     => 'required|alpha_numeric_space|min_length[3]',
                    'email'        => 'required|valid_email|is_unique[users.email]',
                    'password'     => 'required|min_length[8]',
                    'pass_confirm' => 'required_with[password]|matches[password]',
                ];

                protected $validationMessages = [
                    'email'        => [
                        'is_unique' => 'Sorry. That email has already been taken. Please choose another.',
                    ],
                ];
            => Another way to set validation rules and messages
            i.  $fieldName = 'username'; $fieldRules = 'required|alpha_numeric_space|min_length[3]';
                $model->setValidationRule($fieldName, $fieldRules);
            ii. setValidationRules()
                Ex : $validationRules = [
                    'username' => 'required|alpha_numeric_space|min_length[3]',
                    'email' => [
                        'rules'  => 'required|valid_email|is_unique[users.email]',
                        'errors' => [
                            'required' => 'We really need your email.',
                        ],
                    ],
                ];
                $model->setValidationRules($validationRules);
            iii. $fieldName = 'name';
                $fieldValidationMessage = [
                    'required' => 'Your name is required here',
                ];
                $model->setValidationMessage($fieldName, $fieldValidationMessage);
            iv. 
            $fieldValidationMessage = [
                'name' => [
                    'required'   => 'Your baby name is missing.',
                    'min_length' => 'Too short, man!',
                ],
            ];
            $model->setValidationMessages($fieldValidationMessage);

        3.6 Get Errors : 
            *if you used insert update and save method, then you can get errors if validation does not matched with your validation rules   
            Ex :     if ($model->save($data) === false) {
                    return view('updateUser', ['errors' => $model->errors()]);
                }
            Display Error : 
                <?php if (! empty($errors)): ?>
                <div class="alert alert-danger">
                <?php foreach ($errors as $field => $error): ?>
                    <p><?= $error ?></p>
                <?php endforeach ?>
                </div>
            <?php endif ?>

        3.7 if you dont want to use allowedFields, then you can simple call  in controller  $model->protect(false)->insert($data)->protect(true);
            thereafter belwo said field will be ignore while insert, update and save method();
            protected $allowedFields = ['name', 'email', 'address'];

        3.8 ReturnType : you can specfic data type return formate like below 👍

            i. $users = $userModel->asArray()->where('status', 'active')->findAll();
            ii. $users = $userModel->asObject()->where('status', 'active')->findAll(); //  Return as standard objects 
                $users = $userModel->asObject('User')->where('status', 'active')->findAll();// Return as custom class instances
                
            iii. Handling the large amount data by using chuck($numberRow, Closure);
                Example : $userModel->chunk(100, function ($data) {
                    // do something.
                    // $data is a single row of data.
                });
        3.9 Callbacks in Model :
            * all callbacks are called in respect of properites afterInsert['callbacksName/functionName'], $beforeUpdate, $afterUpdate, $afterFind, and $afterDelete 
            Example : 
                protected function hashPassword(array $data){
                    if (! isset($data['data']['password'])) {
                        return $data;
                    }
                    $data['data']['password_hash'] = password_hash($data['data']['password'], PASSWORD_DEFAULT);
                    unset($data['data']['password']);

                    return $data;
                }
            protected $beforeInsert = ['hashPassword']; // hashPassword method will be call before execute insert/update/save method.
            protected $beforeUpdate = ['hashPassword'];
                i. protected $allowCallbacks = false; // callbacks will be not call
                ii. $model->allowCallbacks(false)->find(1); // No callbacks triggered


        3.10 Entity Classes : this is an optiona, this is will seprate the some codes to this file for model    
            * path : App\Entity // here you can create your entity
            app/Entities/User.php
            <?php
            namespace App\Entities;
            use CodeIgniter\Entity\Entity;

            class User extends Entity{// ...}
            
            app\Models\UserModel.php
            <?php

            namespace App\Models;
            use CodeIgniter\Model;

            class UserModel extends Model
            {
                protected $table         = 'users';
                protected $allowedFields = [
                    'username', 'email', 'password',
                ];
                protected $returnType    = \App\Entities\User::class; // call the entity data
                protected $useTimestamps = true;
            }

    4. Managing Database :
        $forge = \Config\Database::forge("group_name"); //you can give parameter for databaseName Group name else deafault load group
        i. if ($forge->createDatabase('my_db')) { echo 'Database created!';}
        ii. $forge->createDatabase('my_db', true); //  check database exits or not
        iii. $forge->dropDatabase(‘db_name’)
        
        4.1. Create Table : 
            $fields = [
                'id'          => [
                    'type'           => 'INT',
                    'constraint'     => 5,
                    'unsigned'       => true,
                    'auto_increment' => true
                ],
                'title'       => [
                    'type'           => 'VARCHAR',
                    'constraint'     => '100',
                    'unique'         => true,
                ],
                'author'      => [
                    'type'           =>'VARCHAR',
                    'constraint'     => 100,
                    'default'        => 'King of Town',
                ],
                'description' => [
                    'type'           => 'TEXT',
                    'null'           => true,
                ],
                'status'      => [
                    'type'           => 'ENUM',
                    'constraint'     => ['publish', 'pending', 'draft'],
                    'default'        => 'pending',
                ],
            ];
            $forge->addField($fields)->createTable("tableName"); 

                i. Creating an id field : $forge->addField('id'); // gives `id` INT(9) NOT NULL AUTO_INCREMENT with primary key 

                ii. addKey("column_name", boolean, boolean) : second parameter is primary key if u set true, third parameter is unique key if you set true and both optional
                    $forge->addKey('blog_id', true); // blog_id will be primary key
                    or 
                        $forge->addPrimaryKey('blog_id');
                        $forge->addUniqueKey(['blog_id', 'uri']);

                iii. $forge->addForeignKey('users_id', 'users', 'id'); // gives CONSTRAINT `TABLENAME_users_foreign` FOREIGN KEY(`users_id`) REFERENCES `users`(`id`)
                    $forge->addForeignKey(['users_id', 'users_name'], 'users', ['id', 'name']); // gives CONSTRAINT `TABLENAME_users_foreign` FOREIGN KEY(`users_id`, `users_name`) REFERENCES `users`(`id`, `name`)

                    => You can specify the desired action for the “on delete” and “on update” properties of the constraint:
                        $forge->addForeignKey('users_id', 'users', 'id', 'CASCADE', 'CASCADE'); // gives CONSTRAINT `TABLENAME_users_foreign` FOREIGN KEY(`users_id`) REFERENCES `users`(`id`) ON DELETE CASCADE ON UPDATE CASCADE
                        $forge->addForeignKey(['users_id', 'users_name'], 'users', ['id', 'name'], 'CASCADE', 'CASCADE'); // gives CONSTRAINT `TABLENAME_users_foreign` FOREIGN KEY(`users_id`, `users_name`) REFERENCES `users`(`id`, `name`) ON DELETE CASCADE ON UPDATE CASCADE
                
                iv. create->Table("tableName", boolean) // second parameter is optional, create table if not exist.
                v. table attribute lik mysqli engine    
                    Example : $attributes = ['ENGINE' => 'InnoDB']; $forge->createTable('table_name', false, $attributes);

                vi.  $forge->dropTable('table_name'); //  Produces: DROP TABLE `table_name`
                    $forge->dropTable('table_name', true); // Produces: DROP TABLE IF EXISTS `table_name`
                    $forge->dropTable('table_name', false, true); // Produces: DROP TABLE `table_name` CASCADE (third parameter for remove the table if foreign keys exits)

                vii. Drop Foreign Key 
                    $forge->dropForeignKey('tablename', 'users_foreign'); // Produces: ALTER TABLE `tablename` DROP FOREIGN KEY `users_foreign`
                
		viii. drop a key : $forge->dropKey('tablename', 'users_index');  // Produces: DROP INDEX `users_index` ON `tablename`
                xi. $forge->renameTable('old_table_name', 'new_table_name');

                x. Add Column 
                    $fields = [ 'preferences' => ['type' => 'TEXT']]; $forge->addColumn('table_name', $fields);
                        or 
                        // Will place the new column after the `another_field` column:
                        $fields = [
                            'preferences' => ['type' => 'TEXT', 'after' => 'another_field'] // after key will be placed after column of vaule column name
                        ];

                        // Will place the new column at the start of the table definition:
                        $fields = [
                            'preferences' => ['type' => 'TEXT', 'first' => true] // new column will be add in the first position of table
                        ];
                xi. $forge->dropColumn('table_name', 'column_to_drop'); // to drop one single column
                        or $forge->dropColumn('table_name', 'column_1,column_2'); // by proving comma separated column names
                            $forge->dropColumn('table_name', ['column_1', 'column_2']); // by proving array of column names
                x. Modify Column 
                    $fields = [
                        'old_name' => [
                            'name' => 'new_name',
                            'type' => 'TEXT',
                        ],
                    ];
                    $forge->modifyColumn('table_name', $fields);

            4.2 Migration :
                * path : App/Database/Migrations/YYYYMMDDHHIISS_fileName.php
                * migration file name should be as YYYYMMDDHHIISS
                i. Create Migration 
                    <?php
                    namespace App\Database\Migrations;
                    use CodeIgniter\Database\Migration;
                    class AddBlog extends Migration
                    {
                        protected $DBGroup = 'alternate_db_group'; // optional you can set another database group name

                        public function up()
                        {
                            $this->forge->addField([
                                'blog_id'          => [
                                    'type'           => 'INT',
                                    'constraint'     => 5,
                                    'unsigned'       => true,
                                    'auto_increment' => true,
                                ],
                                'blog_title'       => [
                                    'type'       => 'VARCHAR',
                                    'constraint' => '100',
                                ],
                                'blog_description' => [
                                    'type' => 'TEXT',
                                    'null' => true,
                                ],
                            ]);
                            $this->forge->addKey('blog_id', true);
                            $this->forge->createTable('blog');
                        }

                        public function down()
                        {
                            $this->forge->dropTable('blog');
                        }
                    }

                Controller : 
                <?php
                namespace App\Controllers;

                class Migrate extends \CodeIgniter\Controller
                {
                    public function index()
                    {
                        $migrate = \Config\Services::migrations();

                        try {
                            $migrate->latest();
                        } catch (\Throwable $e) {
                            // Do something with the error here...
                        }
                    }
            }

            4.3 Seeding : 
                * its usefull for development envroinment for insert rondom data
                * database seeding must be have run() method
            Example : 
            <?php
            namespace App\Database\Seeds;
            use CodeIgniter\Database\Seeder;
            class SimpleSeeder extends Seeder
            {
                public function run()
                {
                    $data = [
                        'username' => 'darth',
                        'email'    => 'darth@theempire.com'
                    ];

                    // Simple Queries
                    $this->db->query("INSERT INTO users (username, email) VALUES(:username:, :email:)", $data);

                    // Using Query Builder
                    $this->db->table('users')->insert($data);
                }
            }
                4.3.1 call() : you can call another seeder within your seeders 
                        class TestSeeder extends Seeder
                        {
                            public function run()
                            {
                                $this->call('UserSeeder');
                                $this->call('CountrySeeder');
                                $this->call('JobSeeder');
                            }
                        }
                        => You can grab a copy of the main seeder through the database config class:
                        $seeder = \Config\Database::seeder();
                        $seeder->call('TestSeeder');

    5. Library Reference 
        5.1 Cache Driver : 
            Example : 
                cache()->save('foo', 'foobarbaz!', 300); //  Save into the cache for 5 minutes 
                $cache = \Config\Services::cache(); $foo = $cache->get('foo'); // get cache 

                i. remember(string $key, int $ttl, Closure $callback) : 
                        $key (string) – Cache item name
                        $ttl (int) – Time to live in seconds
                        $callback (Closure) – Callback to invoke when the cache item returns null

                ii. save(string $key, $data[, int $ttl = 60[, $raw = false]])
                        $key (string) – Cache item name
                        $data (mixed) – the data to save
                        $ttl (int) – Time To Live, in seconds (default 60)
                        $raw (bool) – Whether to store the raw value
                    Ex : 
                iii. delete($cache_key) : delete cache
                iv.  $cache->deleteMatching('prefix_*'); // deletes all items of which keys start with "prefix_"
                        And $cache->deleteMatching('*_suffix'); // deletes all items of which keys end with "_suffix"
                v. $cache->clean() : delete entire caches
                vi. var_dump($cache->getCacheInfo()) : return all caches information
                v. var_dump($cache->getMetadata('my_cached_item')) // return details of specfic cache information

        5.2 Cookie  :  is a small piece of data that a server sends to the user’s web browser
		=> Note :	
			i. if you set cookie and redirect instantly, then you have to use function redirect()->withCookies
			ii. Cookies name : should be simple, if spaces, tabe, empty and any special letter will be not accepted
			ii. this cookie not set to browser,,,
			iii. helper cookie set to browser method : set_cookie("name", "value", "expire_time") // expire time in seconds; 
					 -> get_cookie("name") // return cookie value
					-> delete_cookie("name") // delete exist cokkie, 
					-> has_cookie("name") // check cookie exist or not,  tested but not working
            
            *Cookes Mannualy Used for three purpose : 
                i.   Session management: Logins, shopping carts, game scores, or anything else the server should remember
                ii.  Personalization: User preferences, themes, and other settings
                iii. Tracking: Recording and analyzing user behavior
            5.2.1 Creating Cookies has four way : 
                    use CodeIgniter\Cookie\Cookie;
                    use DateTime;
                    use DateTimeZone;

                    i. // Using the constructor
                    $cookie = new Cookie('remember_token', 'f699c7fd18a8e082d0228932f3acd40e1ef5ef92efcedda32842a211d62f0aa6',
                        [
                            'expires'  => new DateTime('+2 hours'),
                            'prefix'   => '__Secure-',
                            'path'     => '/',
                            'domain'   => '',
                            'secure'   => true,
                            'httponly' => true,
                            'raw'      => false,
                            'samesite' => Cookie::SAMESITE_LAX,
                        ]
                    );

                    ii. // Supplying a Set-Cookie header string
                    $cookie = Cookie::fromHeaderString( 'remember_token=f699c7fd18a8e082d0228932f3acd40e1ef5ef92efcedda32842a211d62f0aa6; Path=/; Secure; HttpOnly; SameSite=Lax', false, // raw);

                    iii. // Using the fluent builder interface
                    $cookie = (new Cookie('remember_token'))
                        ->withValue('f699c7fd18a8e082d0228932f3acd40e1ef5ef92efcedda32842a211d62f0aa6')
                        ->withPrefix('__Secure-')
                        ->withExpires(new DateTime('+2 hours'))
                        ->withPath('/')
                        ->withDomain('')
                        ->withSecure(true)
                        ->withHTTPOnly(true)
                        ->withSameSite(Cookie::SAMESITE_LAX);

                    iv. // Using the global function `cookie` which implicitly calls `new Cookie()`
                    $cookie = cookie('remember_token', 'f699c7fd18a8e082d0228932f3acd40e1ef5ef92efcedda32842a211d62f0aa6');
                
		5.2.2 Accessing Cookie attributes
                    $cookie->getName(); // 'remember_token'
                    $cookie->getPrefix(); // '__Secure-'
                    $cookie->getPrefixedName(); // '__Secure-remember_token'
                    $cookie->getExpiresTimestamp(); // Unix timestamp
                    $cookie->getExpiresString(); // 'Fri, 14-Feb-2025 00:00:00 GMT'
                    $cookie->isExpired(); // false
                    $cookie->getMaxAge(); // the difference from time() to expires
                    $cookie->isRaw(); // false
                    $cookie->isSecure(); // true
                    $cookie->getPath(); // '/'
                    $cookie->getDomain(); // ''
                    $cookie->isHTTPOnly(); // true
                    $cookie->getSameSite(); // 'Lax'

                    // additional getter
                    $cookie->getId(); // '__Secure-remember_token;;/'
                    
                5.2.3 Immutable Cookies : if u Modify cookie, you need to create new instance 
                    use CodeIgniter\Cookie\Cookie;
                    $cookie = new Cookie('login_token', 'admin');
                    $cookie->getName(); // 'login_token'

                    $cookie->withName('remember_token');
                    $cookie->getName(); // 'login_token'

                    $new = $cookie->withName('remember_token'); // new instance 
                    $new->getName(); // 'remember_token'
                ............ leave point...
	
		

        5.3 Files 
            $file = new \CodeIgniter\Files\File($path);
                i. $file->getBasename() : get file name
                ii. $file->getRealPath() : get random filename
                iii. $bytes    = $file->getSizeByUnit(); // 256901
                iv. $kilobytes = $file->getSizeByUnit('kb'); // 250.880
                v. $megabytes  = $file->getSizeByUnit('mb'); // 0.245
                vi. $file->getMimeType(); // imags/png/jpg 
                vii. $file->move(WRITEPATH . 'uploads');// move file, and third parameter can be move with new name 
            5.3.1 Read, Write, 
                i. write_file("filename.txt", "I love content"); or 
                        write_file(WRITEPATH. "fileNmae.txt", "I am writting in writable folder");
                ii.  readfile("./data.txt") or  $data2 = readfile(WRITEPATH. "data-2.txt");
                iii. 

        5.4 image
            5.4.1 Image Manuplatioin 
		Note : whereas your path folder containing the image files must have write permissions.

		i. $image = \Config\Services::image(); // used GD library		
		ii. $image = \Config\Services::image('imagick'); // used imagick The ImageMagick library.
			-> If using the ImageMagick library, you must set the path to the library on your server in app/Config/Images.php
		=> Example : best for thumbnail 
			$image->withFile('/path/to/image/mypic.jpg') >fit(100, 100, 'center')->save('/path/to/image/mypic_thumb.jpg');
			$image->withFile('/path/to/image/mypic.jpg')->reorient()->rotate(90)->crop(100, 100, 0, 0)->save('/path/to/image/mypic_thumb.jpg');
		iii. Image Quality
			$image->withFile('/path/to/image/mypic.jpg')->save('/path/to/image/my_low_quality_pic.jpg', 10);
			Note : save() second parameter only apply to jpeg image else will ignore;  
			
			-> change only image quality
			$image->withFile('/path/to/image/mypic.jpg')->withResource()
    			->save('/path/to/image/my_low_quality_pic.jpg', 10);
		
	5.4.1.1 Processing Methods for image
	=>Thats all methods can be catch errors : try{}catch(CodeIgniter\Images\Exceptions\ImageException $e){echo $e->getMessage()}
		i. $image->crop()
		ii. $image->convert() : convert image to png 
		\Config\Services::image()
		    ->withFile('/path/to/image/mypic.jpg')
		    ->convert(IMAGETYPE_PNG)
		    ->save('/path/to/new/image.png');

		iii. $image->fit()
		iv. $image->flatten()
		v. $image->flip()
		vi. $image->resize()
		vii. $image->rotate(float $angle) : $angle is the number of degrees to rotate. One of 90, 180, 270.
		viii. $image->text() : add text to image as watermark,
		\Config\Services::image('imagick')->withFile('/path/to/image/mypic.jpg')->text('Copyright 2017 My Photo Co', 
		['color'      => '#fff',
        	'opacity'    => 0.5,
	        'withShadow' => true,
        	'hAlign'     => 'center',
	        'vAlign'     => 'bottom',
	        'fontSize'   => 20,])->save('/path/to/new/image.jpg');
	
	Learn more : https://codeigniter.com/user_guide/libraries/images.html




	





		
	   5.4.2. Get File Information : 
		$file = new \CodeIgniter\Files\File($path);
		$file->getBasename();
		$file->getRealPath();
		$file->getRandomName(); // generate random filename
		$file->guessExtension(); // return file extension
		$file->move(WRITEPATH . 'uploads'); // move project writable folder/upload
		$file = $file->move(WRITEPATH . 'uploads', $newNameFile); // second parameter new name you can use random name function
			// $file return all information like name, path, basename etc.







        5.5 pagination	
		$pager = \Config\Services::pager(); // not need to laod, becuase app/config/pager its loaded automatically.

	        $model = new \App\Models\UserModel();
        	$data = ['users' => $model->paginate(10),'pager' => $model->pager,]; // first parameter create 10 users data per page, second is pager link
		 =>  access link : $model->pager->links(); 
		=> in view file : <?= $pager->simpleLinks() ?>
		
=		5.5.1 Multiple Pagination results : If you need to provide links from two different result sets then pass group name
			$data = ['users' => $model->paginate(10, 'group1'), $model->paginate(10, 'group2')'pager' => $model->pager,]; 
			view file : <?= $pager->links('group1') ?> or <?= $pager->links('group1') ?>

		5.5.2 get spesfic page data by passing third argument 
			suppose You have in one table 100 records, data will be produce by 5 user data per page, So 10 page will be generate, 
			Now  I am showing 5th page data using third argument.
			: $model->paginate(5, 'group1', 5)
		5.5.3 Other Method
			i. pager->hasPrevious()) : check previous pagination exist or not
			ii. $pager->getPageCount() // count total no. of page

		=> Normal Example : 
		controller file : $model = new MemberModel();	
	            $data = [
        	        'users' => $model->paginate(2),
                	'pager' => $model->pager,
	            ];
        	    return view('practice',$data);

	       view file : 
	      <div class="d-flex justify-content-end">
	        <?php if ($pager) :?>
	        <?php $pagi_path='index.php/example'; ?>
	        <?php $pager->setPath($pagi_path); ?>
        	<?= $pager->links() ?> or         	<?= $pager->simpleLinks() ?>
	        <?php endif ?>
	      </div>
			




        5.6 Session 
            => The Session class permits you to maintain a user’s “state” and track their activity while they browse your site.
            => Whenever your browse  a browser, session data will be available otherwise it will be destory with browser close
            => tempdata and flash data are  session class, so you can read those from global session variable $_SESSION['key']  

            Example : Controller/Home.php
                    $session = \Config\Services::session($config);
                    $session = session();
                i. Adding Session Data :  $session->set($associatedArray); or $session->set('key', 'value');
                        => $session->has("key") or isset($_SESSION['key']) // return true if exist
                        => Pushing new Value to associatedArray : $session->push('hobbies', ['sport'=>'tennis']);
                ii. Remove Session Data :  $session->remove('key') or unset($_SESSION['some_name'], $_SESSION['some_name']) or 
                        $array_items = ['username', 'email'];  $session->remove($array_items);
            5.6.1 Flashdata : its used only for one times , thereafter it will be automatically cleared
                    => This can be very useful, especially for one-time informational, error or status messages (for example: “Record 2 deleted”).

                    $_SESSION['item'] = 'value';
                    i. $session->markAsFlashdata('item')  // add Flashdata
                    ii. $session->markAsFlashdata(['item', 'item2']); // add multiple flashdata 
                    iii. $session->setFlashdata('item', 'value'); // add flash data
                    iv.  $_SESSION['item'] or $session->getFlashdata('item'); // read flash data
                    v. $session->getFlashdata(); // get all flashdata an array
                    vi. $session->keepFlashdata('item'); // do not clear flash data
                        $session->keepFlashdata(['item1', 'item2', 'item3']);

            5.6.2 Tempdata 
                => CodeIgniter also supports “tempdata”, or session data with a specific expiration time
                => tempdata like an flashdata 
                => if u set null time for expire tempdata, So tempdata default erased time is 300seconds (5 mints) 


                i. $session->markAsTempdata('item', 300); // keep data until complete 300 seconds
                    or  $session->markAsTempdata(['item', 'item2'], 300); // Both 'item' and 'item2' will expire after 300 seconds
                        $session->markAsTempdata(['item' => 300, 'item2' => 240,]); item will erased after 300 seconds and item2 240 seconds
                ii. add tempdata :  $_SESSION['item'] = 'value'; $session->markAsTempdata('item', 300); // Expire in 5 minutes \
                            or $session->setTempdata('item', 'value', 300);
                iii. $session->getTempdata('item'); // read surely tempdata only
                iv. $session->getTempdata(); // read all existing tempdata
                v. unset($_SESSION['item']); // remove tempata before expiration time

            5.6.3 Destory Session : session_destroy(); or $session->destroy();


 




 





                




        5.7 Times and Date
            use CodeIgniter\I18n\Time;
                i. new Time('+3 week'); // after three week date and time from today time
                ii. new Time('now'); // current times and date
                ii $time = Time::today();
                     $time->toLocalizedString('dd-MM-yyyy'); // dd = 05, d = 5, m=5, mm=05,mmm=May, y=lastTwoDigitofYear, yyyy/yyyy=2022
                     $time->toDateTimeString() // return date and time only
                iii. $time->humanize() // calculate below as per said 
                        Time difference                 Result 
                    $time > 1 year && < 2 years	    = in 1 year / 1 year ago
                    $time > 1 month && < 1 year	    = in 6 months / 6 months ago
                    $time > 7 days && < 1 month	    = in 3 weeks / 3 weeks ago
                    $time > today && < 7 days	    = in 4 days / 4 days ago
                    $time == tomorrow / yesterday   = 	Tomorrow / Yesterday
                    $time > 59 minutes && < 1 day   = 	in 2 hours / 2 hours ago
                    $time > now && < 1 hour	        = in 35 minutes / 35 minutes ago
                    $time == now                    = Now
 
                iv. $time->getYear/Month/Seconds/Minute/Second etc. () or $time->Year/Month/Seconds/Minute/Second etc.()
                v. $time->setYear/Month/Seconds/Minute/Second etc. () // settime;
            5.7.1 Modify the time or date : 
                You have to crate new instance(assign to variable $time below) like belwo  
                        Add Time to current time
                -+8+-5486902111111103
                goo    $time = $time->addSeconds(23);
                    $time = $time->addMinutes(15);
                    $time = $time->addHours(12);
                    $time = $time->addDays(21);
                    $time = $time->addMonths(14);
                    $time = $time->addYears(5);
                        minus time to current time
                    $time = $time->subSeconds(23); //
                    $time = $time->subMinutes(15);
                    $time = $time->subHours(12);
                    $time = $time->subDays(21);
                    $time = $time->subMonths(14);
                    $time = $time->subYears(5);

            5.7.2 difference between the two times
                $current = Time::parse('March 10, 2017', 'America/Chicago');
                $test    = Time::parse('March 10, 2010', 'America/Chicago');

                $diff = $current->difference($test);
                echo $diff->getYears();   // -7
                echo $diff->getMonths();  // -84
                echo $diff->getWeeks();   // -365
                echo $diff->getDays();    // -2557
                echo $diff->getHours();   // -61368
                echo $diff->getMinutes(); // -3682080
                echo $diff->getSeconds(); // -220924800
                or 
                echo $diff->years;   // -7
                echo $diff->months;  // -84
                echo $diff->weeks;   // -365
                echo $diff->days;    // -2557
                echo $diff->hours;   // -61368
                echo $diff->minutes; // -3682080
                echo $diff->seconds; // -220924800
                    
                    i. you can use also humanize method for exact the extract day/year/month from two time/date
                    echo $diff->humanize(); // 1 year ago
        5.8 Validation

    
     6. Helper : like an collection of functions which is made by codiegniter
        i. helper('cookie');
            => set_cookie($name[, $value = ''[, $expire = ''[, $domain = ''[, $path = '/'[, $prefix = ''[, $secure = false[, $httpOnly = false[, $sameSite = '']]]]]]]])
                $name (mixed) – Cookie name or associative array of all of the parameters available to this function
                $value (string) – Cookie value
                $expire (int) – Number of seconds until expiration
                $domain (string) – Cookie domain (usually: .yourdomain.com)
                $path (string) – Cookie path
                $prefix (string) – Cookie name prefix
                $secure (bool) – Whether to only send the cookie through HTTPS
                $httpOnly (bool) – Whether to hide the cookie from JavaScript
                $sameSite (string) – The value for the SameSite cookie parameter. If null, the default from config/App.php is used

            =>get_cookie($index[, $xssClean = false])
                $index (string) – Cookie name
                $xss_clean (bool) – Whether to apply XSS filtering to the returned value

            => delete_cookie($name[, $domain = ''[, $path = '/'[, $prefix = '']]])
                $name (string) – Cookie name
                $domain (string) – Cookie domain (usually: .yourdomain.com)
                $path (string) – Cookie path
                $prefix (string) – Cookie name prefix
            => has_cookie(string $name[, ?string $value = null[, string $prefix = '']])
                $name (string) – Cookie name
                $value (string|null) – Cookie value
                $prefix (string) – Cookie prefix

        ii. helper('date') :    echo now('Australia/Victoria'); echo timezone_select('custom-select', 'America/New_York');

        iii. helper('form');
            <input type="text" name="myfield" value="<?= esc($string) ?>" />

            => form_open([$action = ''[, $attributes = ''[, $hidden = []]]]) or form_open_multipart([$action = ''[, $attributes = ''[, $hidden = []]]])
                Example 1. echo form_open('email/send'); // would be  : <form action="http://example.com/index.php/email/send" method="post" accept-charset="utf-8">
                Example 2. echo form_open('{locale}/email/send'); // <form action="http://example.com/index.php/en/email/send" method="post" accept-charset="utf-8">
                
                *Adding Attributes 
                Example 3. 
                        $attributes = ['class' => 'email', 'id' => 'myform']; 
                        echo form_open('email/send', $attributes);
                            or  echo form_open('email/send', 'class="email" id="myform"'); // would be : <form action="http://example.com/index.php/email/send" class="email" id="myform" method="post" accept-charset="utf-8">
                
                *Adding Hidden input
                Example 4. $hidden = ['username' => 'Joe', 'member_id' => '234'];
                            echo form_open('email/send', '', $hidden);
                    //output : <form action="http://example.com/index.php/email/send" method="post" accept-charset="utf-8">
                                    <input type="hidden" name="username" value="Joe" />
                                    <input type="hidden" name="member_id" value="234" />
                                    
            => form_hidden($name[, $value = '']) 
                Example 1. : form_hidden('username', 'johndoe'); // Would produce: <input type="hidden" name="username" value="johndoe" />

                Example 2. $data = [ 'name'  => 'John Doe', 'email' => 'john@example.com', 'url'   => 'http://example.com',];
                            echo form_hidden($data);
                    Output : <input type="hidden" name="name" value="John Doe" />
                            <input type="hidden" name="email" value="john@example.com" />
                            <input type="hidden" name="url" value="http://example.com" 
                            />
            => form_input() : 
                $data = [
                    'name'      => 'username',
                    'id'        => 'username',
                    'value'     => 'johndoe',
                    'maxlength' => '100',
                    'size'      => '50',
                    'style'     => 'width:50%',
                ]; echo form_input($data);

                output : <input type="text" name="username" value="johndoe" id="username" maxlength="100" size="50" style="width:50%" />
                
                * Pass third parameter as js 
                    $js = 'onClick="some_function ()"';
                    echo form_input('username', 'johndoe', $js); 
                        or 
                        $js = ['onClick' => 'some_function ();'];
                        echo form_input('username', 'johndoe', $js);
                * Pas HTML5 Input fileds 
                    echo form_input('email', 'joe@example.com', ['placeholder' => 'Email Address...'], 'email');
                            output :     <input type="email" name="email" value="joe@example.com" placeholder="Email Address..." />
            
            => form_password(), form_upload(), form_textarea() : like form_input() 

            http://codeigniter.com/user_guide/helpers/form_helper.html checkout for more infomration above this form helper 
        
        iv. helper('inflector') :  permit you to change English words to plural, singular, camel case, etc.
                Exampel 1.  echo singular('dogs'); // Prints 'dog'
                        2.  echo plural('dog'); // Prints 'dogs'3
                        3.  echo camelize('my_dog_spot'); // to CameCase : Prints 'myDogSpot'
                        4.  echo pascalize('my_dog_spot'); // to Pascal case :  Prints 'MyDogSpot' 
                        5. ordinalize(1); // Returns '1st'
        v. helper('number') 👍
            Example 1. number_to_size()
                        echo number_to_size(456); // Returns 456 Bytes
                        echo number_to_size(4567); // Returns 4.5 KB
                        echo number_to_size(45678); // Returns 44.6 KB
                        echo number_to_size(456789); // Returns 447.8 KB
                        echo number_to_size(3456789); // Returns 3.3 MB
                        echo number_to_size(12345678912345); // Returns 1.8 GB
                        echo number_to_size(123456789123456789); // Returns 11,228.3 TB     

                    2. number_to_roman()
                        echo number_to_roman(23);  // Returns XXIII
                        echo number_to_roman(324);  // Returns CCCXXIV
                        echo number_to_roman(2534);  // Returns MMDXXXIV

        vi. helper('text') 
                Example 1. random_string([$type = 'alnum'[, $len = 8]]) : generate ra random string
                            alpha: A string with lower and uppercase letters only.
                            alnum: Alphanumeric string with lower and uppercase characters.
                            basic: A random number based on mt_rand() (length ignored).
                            numeric: Numeric string.
                            nozero: Numeric string with no zeros.
                            md5: An encrypted random number based on md5() (fixed length of 32).
                            sha1: An encrypted random number based on sha1() (fixed length of 40).
                            crypto: A random string based on random_bytes().
                                    Ex :  echo random_string('alnum', 16);
                
                Example 2. $str = strip_slashes($str); remove slash from string
                Example 3. strip_quotes($str) // Removes single and double quotes from a string. 
                Example 4. word_limiter($string, 4); // return only four words from an lines
                 
                 i. character_limiter($string, 20) : return only character/letter without count spaces
                 ii. highlight_code($string) : Colorizes a string of code (PHP, HTML, etc.). Example:

        vii. helper('url') : this is url person is automatically loaded on every request
                
                i.  site_url('news/local/123') or $segments = ['news', 'local', '123']; echo site_url($segments);
                ii. base_url('images/icons/edit.png')
                iii. current_url() or site_url(uri_string()): return current url of which are you on browse 

                iv. uri_string(): return an path of url except of domain like 
                    Ex : 
                        $app =   http://some-site.com/blog/comments/123;  uri_string($app) // return blog/comments/123
                
                v. anchor(): 
                    echo anchor('news/local/123', 'My News', 'title="News title"'); // Prints: <a href="http://example.com/index.php/news/local/123" title="News title">My News</a>

                    echo anchor('news/local/123', 'My News', ['title' => 'The best news!']); // Prints: <a href="http://example.com/index.php/news/local/123" title="The best news!">My News</a>

                    echo anchor('', 'Click here'); // Prints: <a href="http://example.com/index.php">Click here</a>

                vi.  url_to('ControllerClass::Method', 'RoutesName'); // routes third paramter is optional
                vii. url_title("Home Page");
                vii.  mailto('me@my-site.com', 'Click Here to Contact Me'); // third parameter can be html attribute 

                viii. anchor_popup() : 
                        $atts = [
                            'width'       => 800,
                            'height'      => 600,
                            'scrollbars'  => 'yes',
                            'status'      => 'yes',
                            'resizable'   => 'yes',
                            'screenx'     => 0,
                            'screeny'     => 0,
                            'window_name' => '_blank',
                        ];echo anchor_popup('news/local/123', 'Click Me!', $atts);
		=> helpers are easy, So i am not making such as notes 👍 
	            checkout : https://codeigniter.com/user_guide/helpers/
	7. LOGGER MESSAGE
		=> configuration your log messsage at : app/Config/Logger.php
		i. Modify with message with context
	Example  : 
	// Generates a message like: User 123 logged into the system from 127.0.0.1
	$info = [
    	'id'         => $user->id,
    	'ip_address' => $this->request->getIPAddress(),
	];
	log_message('info', 'User {id} logged into the system from {ip_address}', $info);
	
	Example 2. 
		try {
 		   // Something throws error here
		} catch (\Exception $e) {
		    log_message('error', '[ERROR] {exception}', ['exception' => $e]);
		}


=> Command Line usage : 
    1. php spark list 
            Cache
        cache:clear        Clears the current system caches.
        cache:info         Shows file cache information in the current system.

        CodeIgniter
        env                Retrieves the current environment, or set a new one.
        help               Displays basic usage information.
        list               Lists the available commands.
        namespaces         Verifies your namespaces are setup correctly.
        publish            Discovers and executes all predefined Publisher classes.
        routes             Displays all of user-defined routes. Does NOT display auto-detected routes.
        serve              Launches the CodeIgniter PHP-Development Server.

        Database
        db:create          Create a new database schema.
        db:seed            Runs the specified seeder to populate known data into the database.
        migrate            Locates and runs all new migrations against the database.
        migrate:refresh    Does a rollback followed by a latest to refresh the current state of the database.
        migrate:rollback   Runs the "down" method for all migrations in the last batch.
        migrate:status     Displays a list of all migrations and whether they've been run or not.

You can use (rollback) with the following options:

-g - to choose database group, otherwise default database group will be used.
-b - to choose a batch: natural numbers specify the batch, negatives indicate a relative batch
-f - to force a bypass confirmation question, it is only asked in a production environment

        Encryption
        key:generate       Generates a new encryption key and writes it in an `.env` file.

        Generators
        make:command       Generates a new spark command.
        make:config        Generates a new config file.
        make:controller    Generates a new controller file.
        make:entity        Generates a new entity file.
        make:filter        Generates a new filter file.
        make:migration     Generates a new migration file.
        make:model         Generates a new model file.
        make:scaffold      Generates a complete set of scaffold files.
        make:seeder        Generates a new seeder file.
        make:validation    Generates a new validation file.
        migrate:create     [DEPRECATED] Creates a new migration file. Please use "make:migration" instead.
        session:migration  [DEPRECATED] Generates the migration file for database sessions, Please use 
                            "make:migration --session" instead.

        Housekeeping
        debugbar:clear     Clears all debugbar JSON files.
        logs:clear         Clears all log files.
                                                        

